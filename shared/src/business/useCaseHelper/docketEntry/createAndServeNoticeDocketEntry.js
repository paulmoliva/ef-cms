const {
  aggregatePartiesForService,
} = require('../../utilities/aggregatePartiesForService');
const {
  DocketEntry,
  getServedPartiesCode,
} = require('../../entities/DocketEntry');
const {
  DOCUMENT_PROCESSING_STATUS_OPTIONS,
} = require('../../entities/EntityConstants');
const { createISODateString } = require('../../utilities/DateHandler');

const serveNoticesForCase = async (
  applicationContext,
  {
    caseEntity,
    newPdfDoc,
    noticeDocketEntryEntity,
    noticeDocumentPdfData,
    servedParties,
  },
) => {
  await applicationContext.getUseCaseHelpers().sendServedPartiesEmails({
    applicationContext,
    caseEntity,
    docketEntryId: noticeDocketEntryEntity.docketEntryId,
    servedParties,
  });

  if (servedParties.paper.length > 0) {
    const { PDFDocument } = await applicationContext.getPdfLib();
    const noticeDocumentPdf = await PDFDocument.load(noticeDocumentPdfData);

    await applicationContext
      .getUseCaseHelpers()
      .appendPaperServiceAddressPageToPdf({
        applicationContext,
        caseEntity,
        newPdfDoc,
        noticeDoc: noticeDocumentPdf,
        servedParties,
      });
  }
};

/**
 * createAndServeNoticeDocketEntry
 *
 * @param {object} applicationContext the application context
 * @param {object} providers the providers object
 * @param {object} providers.caseEntity the case data
 * @param {object} providers.documentInfo information on the document being served
 * @param {object} providers.newPdfDoc the new PDF contents to be appended
 * @param {object} providers.noticePdf the notice pdf being served
 * @param {object} providers.userId the user ID
 */
exports.createAndServeNoticeDocketEntry = async (
  applicationContext,
  { caseEntity, documentInfo, newPdfDoc, noticePdf, userId },
) => {
  const docketEntryId = applicationContext.getUniqueId();

  await applicationContext.getPersistenceGateway().saveDocumentFromLambda({
    applicationContext,
    document: noticePdf,
    key: docketEntryId,
  });

  const servedParties = aggregatePartiesForService(caseEntity);

  const numberOfPages = await applicationContext
    .getUseCaseHelpers()
    .countPagesInDocument({
      applicationContext,
      docketEntryId,
    });

  const noticeOfChangeOfTrialJudgeDocketEntry = new DocketEntry(
    {
      docketEntryId,
      documentTitle: documentInfo.documentTitle,
      documentType: documentInfo.documentType,
      eventCode: documentInfo.eventCode,
      isAutoGenerated: true,
      isFileAttached: true,
      isOnDocketRecord: true,
      numberOfPages,
      processingStatus: DOCUMENT_PROCESSING_STATUS_OPTIONS.COMPLETE,
      servedAt: createISODateString(),
      servedParties: servedParties.all,
      servedPartiesCode: getServedPartiesCode(servedParties.all),
      userId,
    },
    { applicationContext },
  );

  caseEntity.addDocketEntry(noticeOfChangeOfTrialJudgeDocketEntry);

  await serveNoticesForCase(applicationContext, {
    caseEntity,
    newPdfDoc,
    noticeDocketEntryEntity: noticeOfChangeOfTrialJudgeDocketEntry,
    noticeDocumentPdfData: noticePdf,
    servedParties,
  });
};
